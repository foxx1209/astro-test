@use "sass:math";
@use "sass:map";

// pxからremへの計算式
// 例：myrem(32) → 2rem
@function myrem($pixels) {
  @return math.div($pixels, 16) * 1rem;
}

// 数値のみを取り出す
// 例：strip-unit(16px) → 16
@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return math.div($number, $number * 0 + 1);
  }
  @return $number;
}

// フォントサイズ ÷ 画面幅 * 100vw の計算
// 例：vw(1250px, 16px) → 16px ÷ 1250px × 100vw
@function vw($window_width, $size) {
  @return math.div($size, $window_width) * 100vw;
}

@function cl($min, $max, $min-view-port:  375, $max-view-port: 1440) {
  $valiable-part: calc(($max - $min) / ($max-view-port - $min-view-port));
  $constant: calc(($max - $max-view-port * $valiable-part) / 16);
  $min-rem: calc($min / 16 * 1rem);
  $max-rem: calc($max / 16 * 1rem);
  $variable-rem: calc($constant * 1rem);
  $variable-vw: calc(100 * $valiable-part * 1vw);

  @return clamp($min-rem, $variable-rem + $variable-vw, $max-rem);
}


// インナー幅
$innerWidth: 1024px;

// 余白
$padding-pc: 25px;
$padding-sp: 20px;

// フォント
$font-main: "";

// 色指定
$black: #333;
$white: #fff;

// ブレイクポイント
$breakpoints: (
  sm: 600,
  md: 768,
  lg: 1024,
  xl: 1440,
);

// メディアクエリ
$mediaquerys: (
  sm: "screen and (min-width: #{map-get($breakpoints,'sm')}px)",
  md: "screen and (min-width: #{map-get($breakpoints,'md')}px)",
  lg: "screen and (min-width: #{map-get($breakpoints,'lg')}px)",
  xl: "screen and (min-width: #{map-get($breakpoints,'xl')}px)",
);

// メディアクエリを "@include mq(){}" で書くことができる
@mixin mq($mediaquery: md) {
  @media #{map-get($mediaquerys, $mediaquery)} {
    @content;
  }
}